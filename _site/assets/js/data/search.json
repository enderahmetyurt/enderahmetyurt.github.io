[
  
  {
    "title": "Endless Battle: RSpec vs. MiniTest",
    "url": "/posts/endless-battle-rspec-vs-minitest/",
    "categories": "Development",
    "tags": "ruby, minitest, rspec",
    "date": "2025-01-10 15:13:00 +0300",
    





    
    "snippet": "Hello 👋As a Ruby developer, testing is an integral part of the software development lifecycle. Ruby’s vibrant ecosystem provides two prominent testing frameworks: RSpec and MiniTest. While both ser...",
    "content": "Hello 👋As a Ruby developer, testing is an integral part of the software development lifecycle. Ruby’s vibrant ecosystem provides two prominent testing frameworks: RSpec and MiniTest. While both serve the same ultimate goal of ensuring your code works as expected, their philosophies and approaches differ significantly. Let’s explore these frameworks, compare their features, and discuss how to choose the right one for your application.RSpecRSpec is the most popular testing framework in the Ruby community. Designed with a focus on behavior-driven development (BDD), RSpec offers a highly expressive syntax that reads almost like plain English. This makes it beginner-friendly and encourages developers to think about how their code should behave.Features of RSpec  Readable Syntax    describe User do  it \"validates the presence of email\" do user = User.new(email: nil) expect(user).not_to be_valid  endend        Powerful MatchersRSpec provides a rich set of matchers to assert expectations on your code.  Customizable DSLDevelopers can extend or modify RSpec’s domain-specific language (DSL) to suit their needs.  Shared ExamplesReuse test cases across multiple contexts, reducing duplication.  Large EcosystemIntegrates seamlessly with tools like Capybara for feature testing.MiniTestMiniTest is a lightweight, fast, and simple testing library that comes bundled with Ruby. Unlike RSpec, MiniTest embraces a more traditional approach to testing, with minimal abstractions and a focus on being closer to the underlying language.Features of MiniTest  Lightweight: No additional gems are required; MiniTest is part of Ruby’s standard library.  Concise and Fast: Its simplicity makes it faster to load and execute.  Flexible Styles: Supports both spec-style and traditional unit tests.  Closer to Code: Encourages a more direct and less abstract way of writing tests.require \"minitest/autorun\"class TestUser &lt; Minitest::Test  def test_validates_presence_of_email    user = User.new(email: nil)    refute user.valid?  endendRSpec/MiniTest Comparison Table      Feature    RSpec    MiniTest        Syntax    Expressive and DSL-driven    Minimal and closer to Ruby        Philosophy    Behavior-driven development (BDD)    Simple and fast testing        Setup    Requires installation    Comes with Ruby        Performance    Slightly slower due to abstractions    Faster due to minimal overhead        Community    Large and active    Smaller but enthusiastic        Flexibility    Highly customizable    Lightweight and straightforward  Which one is the best for you?Your choice between RSpec and MiniTest largely depends on your project’s requirements and your team’s preferences:When to Choose RSpec:  You’re working on a large project with a team.  You prefer a descriptive, English-like syntax.  You’re practicing BDD and want a testing tool designed with that in mind.  You need advanced features like shared examples and extensive matchers.When to Choose MiniTest:  You value speed and simplicity.  You’re working on a small project or script.  You want minimal dependencies.  You prefer writing tests closer to Ruby’s built-in methods.I wanna use BOTHSome developers use MiniTest for simple, fast unit tests and RSpec for feature or integration tests where descriptive syntax is more beneficial. However, mixing frameworks can complicate your test suite, so consider your team’s comfort level before adopting both.ConclusionBoth RSpec and MiniTest are excellent tools for testing Ruby applications. RSpec shines in readability and a rich ecosystem, while MiniTest excels in speed and simplicity. The best choice is the one that aligns with your project’s goals and your team’s workflow.The Writer’s Comment:I like using MiniTest because it’s simpler to work with than RSpec. One big advantage is that MiniTest is already included with Ruby on Rails, so I can start testing right away. I don’t need to install extra tools or spend time setting up RSpec. MiniTest is efficient and easy to use, which is exactly what we need as developers. Plus, both MiniTest and RSpec use similar ways of writing tests, which makes it easy to switch between them if needed.❤️"
  },
  
  {
    "title": "A Beginner's Guide to Ruby Modules",
    "url": "/posts/understanding-ruby-modules-a-guide-for-newbies/",
    "categories": "Development",
    "tags": "ruby",
    "date": "2025-01-03 15:49:00 +0300",
    





    
    "snippet": "Hello 👋I have been writing Ruby since 2010. At the beginning of my Ruby adventure I didn’t have no idea what modules in Ruby is. Ruby is a beginner-friendly programming language but after some time...",
    "content": "Hello 👋I have been writing Ruby since 2010. At the beginning of my Ruby adventure I didn’t have no idea what modules in Ruby is. Ruby is a beginner-friendly programming language but after some time, you want to have more detailed information about this language. Modules are one of Ruby’s best features. I didn’t have this kind of guide when I was trying to learn Ruby but you will have. This guide will show you what modules are and how to use them.What Is a Ruby Module?A module in Ruby is a collection of methods, constants, and other module or class definitions. Modules are similar to classes, but they cannot be instantiated or inherited from. Instead, modules are used to:      Organize Code: Group related methods and constants together.        Mixin Functionality: Add shared behavior to multiple classes.        Avoid Name Collisions: Create namespaces to prevent conflicts in larger projects.  DefineDefining a module is straightforward. Use the module keyword followed by the module name (written in PascalCase):module Greeting  def say_hello    \"Hello!\"  endendHere, we’ve defined a Greeting module with a say_hello method. But how do we use it?Using Modules as MixinsModules can be included in classes to add methods without duplication. This is called a “mixin.”class Person  include Greetingendperson = Person.newputs person.say_hello  # Outputs: \"Hello!\"By including the Greeting module in the Person class, we make the say_hello method available to instances of Person.If you want the methods to be available as class methods instead of instance methods, use extend:class Robot  extend Greetingendputs Robot.say_hello  # Outputs: \"Hello!\"Creating Namespaces with ModulesModules can be used to group related classes and methods to avoid naming conflicts.module Animals  class Dog    def speak      \"Woof!\"    end  end  class Cat    def speak      \"Meow!\"    end  endend# Access classes inside the moduledog = Animals::Dog.newputs dog.speak  # Outputs: \"Woof!\"Using the Animals::Dog syntax ensures clarity and prevents conflicts with other Dog classes in the codebase.Including vs. ExtendingIt’s essential to understand the difference between include and extend:  include: Adds module methods as instance methods to the class.  extend: Adds module methods as class methods.You can combine both in a single module using self.included:module Utility  def self.included(base)    base.extend(ClassMethods)  end  def instance_method    \"I'm an instance method.\"  end  module ClassMethods    def class_method      \"I'm a class method.\"    end  endendclass Tool  include Utilityendtool = Tool.newputs tool.instance_method       # Outputs: \"I'm an instance method.\"puts Tool.class_method          # Outputs: \"I'm a class method.\"Real World Example: Logging ModuleOkay! Everything looks fine until here but how can we use it in real life. Let’s suppose that you want to add logging functionality to multiple classes.module Logger  def log(message)    puts \"[LOG] #{message}\"  endendclass Order  include Logger  def process    log(\"Processing order...\")  endendclass Payment  include Logger  def charge    log(\"Charging payment...\")  endendorder = Order.neworder.process  # Outputs: [LOG] Processing order...payment = Payment.newpayment.charge  # Outputs: [LOG] Charging payment...ConclusionModules are helpful tools in Ruby. It lets you organize your code better. They make it easier to reuse code and keep it organized. When you learn to use modules well, your Ruby programs will be easier to read and update. Try using modules in your code - you’ll see how useful they can be. Good luck with your coding!❤️"
  },
  
  {
    "title": "2024, How Beautiful You Were",
    "url": "/posts/2024-how-beautiful-you-were/",
    "categories": "Personal",
    "tags": "life",
    "date": "2024-12-24 16:23:00 +0300",
    





    
    "snippet": "Hello 👋It’s that time of year again - time for looking back and thinking about what happened this year. I’m sitting at my computer to write about my year. There’s a dog barking outside, and though ...",
    "content": "Hello 👋It’s that time of year again - time for looking back and thinking about what happened this year. I’m sitting at my computer to write about my year. There’s a dog barking outside, and though it’s a bit distracting, I’ll manage. I’ve got my headphones on with some nice background music playing, so let’s get started, Ender.If you haven’t read my writings (Turkish) from previous years, you can access them below  2023, Kazanımların ve Kayıpların Yılı  Ah be 2022 👋Looking back at a whole year, I remember the big events easily, but the small details are harder to recall. To help me remember, I use my iPhone’s Photos app. It shows me pictures from each month and day of the year. Instead of just listing what happened each month, I want to tell my story in a more interesting way.The biggest change in my life this year was getting married. My relationship from last year became official, and now I’m living the life I’ve always wanted. Some people say if you want something enough, it will happen. But I think it’s more about making the right choices that led me to this happy life.I really love my hometown. When I lived in Istanbul before 2020, I had this dream: to move back home, live in a house with a garden, and work for an international company from home. I kept putting it off, wondering if I’d find the right person to share this life with. But this year, everything worked out perfectly. My spouse and I now live this dream life together. We’re both from the same area, close to our families. 2024 made this dream come true, and it’s made me really happy.Since this is quite personal, I’ll keep it brief in this blog post. I mentioned it first because it’s been the biggest and best change in my life. Now, let me talk about other things. In my work life, not much changed from 2023, but there are some important things to mention.I really enjoy working at Teamtailor. We did great work in 2024. My team focused on making things better for our customers and making it easier for new customers to start using our service. We got better at working with other teams and made our work processes smoother. We’ll keep working on these improvements in 2025. I also worked on being a better communicator at work. In 2024, I focused on communicating more clearly with my colleagues to get work done more efficiently. While we always try to use our time well, good communication is just as important to avoid misunderstandings. I kept these things in mind throughout 2024 and worked more carefully because of it.In 2024, I spent a lot of time writing Ruby code. The highlight of my year was meeting Matz, who created Ruby. I went to two Ruby conferences - one in Sofia and one in Sarajevo. The Sarajevo conference, called Euruko, was really special because it’s Europe’s biggest Ruby event. It was even better because many of my friends from Turkey were there too. You can read about my experience here. My first international conference was Balkan Ruby in Sofia, where I also met lots of Turkish developers. It was great fun! You can read about that here.2024 was a good year for my career. I tried to speak at these international events, and while my talks weren’t accepted, I learned from the experience. Back in Turkey, I gave four presentations, both online and in-person. It felt great to be back on stage speaking to people face-to-face. I also taught a Ruby on Rails Bootcamp. Though it was hard work, I enjoyed helping new developers learn Ruby. I even gave my first talk about something related to, but not exactly about, Ruby. Trying new things can be scary but exciting - I recommend it!I traveled to several places this year. I visited Sweden again, and it was extra special this time because I went with someone I love. Most of my other trips were to Balkan countries. I really enjoy experiencing different cultures, and I hope to visit more countries in 2025.I tried some new things this year. For the first time, I took naps on the beach - something I never thought I’d do! I also got back into music, playing drums with friends in a studio. It was fun to play with others after doing solo practice for so long. I’ve also been exercising regularly for the past three months, which is new for me. Maybe if I eat better, I’ll even get some abs showing! 😛We had some sad moments too. We lost my cousin, Kadir late in the year. It happened suddenly and way too soon. Losing family members is always hard, and it makes us hold our loved ones closer. It reminds us that we never know what tomorrow brings, so we should appreciate our loved ones while we can.Looking ahead to 2025, I want to be better at remembering things by keeping a diary. I plan to write more, read more, exercise more, and spend more time with people I care about. I also want to improve my English and Swedish.Each year, I pick one word to describe it. This year, I chose DISCOVERY because I spent a lot of time exploring new things and adapting to changes.Life goes by quickly, and we all know it will end someday. We can’t change yesterday, and tomorrow isn’t here yet. So let’s enjoy today. I hope 2025 brings you joy and peace. Remember to take care of yourself while showing love to nature and others.Life passes very quickly and whatever we do, it will end one day. Yesterday is gone and tomorrow hasn’t come yet. There’s only today, so let yourself enjoy it. May 2025 bring you more beauty and peace. Continue to live by loving nature and people, without forgetting yourself first.Photo by Kajetan Sumila on Unsplash"
  },
  
  {
    "title": "Before You Go Solo Project: A Developer Confrontation with Themself",
    "url": "/posts/before-you-go-solo-project-a-developer-confrontation-with-themself/",
    "categories": "Personal",
    "tags": "experience",
    "date": "2024-12-18 20:29:00 +0300",
    





    
    "snippet": "Hello 👋IntroWelcome to another post where I’ll share what I learned from my Podiscover project. We’ll go through each lesson in detail to give you a good understanding of my journey.Before we start...",
    "content": "Hello 👋IntroWelcome to another post where I’ll share what I learned from my Podiscover project. We’ll go through each lesson in detail to give you a good understanding of my journey.Before we start, I want to mention that I’ve made other videos about the mistakes I made during this project. If you want to learn more about the challenges I faced, you can find these videos here. The videos are in Turkish, but auto generated English subtitles can help you if you’re not non-native Turkish.Now, let’s talk about what I learned from this business adventure.I started Podiscover a few years ago with lots of excitement. It wasn’t just a business for me; it was something I really cared about. I worked hard on it for about two years. But, like many new businesses, things didn’t go as planned.Even though I worked really hard, I realized I wasn’t reaching the goals I set for Podiscover. So, I had to make the tough decision to stop the project. It was hard, but I now see that it wasn’t a failure. Instead, it taught me a lot, and I think these lessons will help me in my future projects.After thinking about my experience with Podiscover, I’ve come up with 10 important lessons. These lessons cover many topics, like understanding what people want, managing expectations, being flexible, and not giving up when things get tough. I’m excited to share these lessons with you because I think they can help anyone starting a new project or business.1. My problem does not mean everyone’s problemI love listening to and making podcasts. As podcasts became more popular, I got curious about what other people liked to listen to. I wanted to know which podcasts my Spotify friends enjoyed and why. I often saw people asking for podcast recommendations on social media. This made me think, “Why not create a website for sharing podcast recommendations?”I built the website and people liked the idea. But not many people used it regularly. Most visitors only came back once in a while to find new podcasts. I learned that most people don’t want to rate podcasts, write comments, or read what others think. Only a small group of users do these things. Most people don’t even follow the podcasts they listen to. This taught me that what I thought was a common problem wasn’t actually that widespread.2. Knowing technology does not mean I can do everything.I’ve been a software developer for 13 years. I was confident I could turn any idea into a working program. This confidence led me to quickly build a stable software system for my idea, Podiscover. However, I soon faced several challenges.First, the design and user experience of Podiscover weren’t great. This wasn’t my strong suit, and I struggled to improve it. I tried to get help, but it didn’t last long. I felt I needed to learn these skills myself.Second, although the software worked, no one was using it. I didn’t know how to market it or explain why people should use it. I tried to get help with marketing too, but I couldn’t make progress on my own.Third, I wanted to develop the business side, but I lacked time. The software had issues, and I wasn’t sure which features users would like. I didn’t have time to figure this out, and it wasn’t my strength.I learned that making software is just one part of creating a successful product. It might even be the easiest part. You also need skills in design, marketing, and business development. Even after you’ve built the software, there’s still a lot of work to do to get people to use it and to keep improving it.3. Do research before starting the projectI started my project thinking everyone had the same problem as me. I talked to a few friends who agreed with my idea, and that was enough for me to start. I was so excited that I rushed into building the project without talking to experts in the field.Looking back, I made a big mistake by not doing proper research. I was too sure about my idea and trusted my gut feeling instead of checking if there was actually a market for it. I just started coding right away. But without really knowing the industry, I kept running into problems I hadn’t expected.Being too excited about my idea made me skip an important step - research. This ended up wasting my time because I never properly checked if my idea would work. The lesson is simple: before starting any project, take time to do thorough research. Make sure people actually want and need your solution, and understand if the market is ready for it.4. You can’t do it aloneI don’t like working alone. However, when an idea starts, you are inevitably alone. Actually, there is nothing wrong with that. Every project is started by one person and then the team can grow. However, my mistake was to extend this time a little. I think I thought I could do many things alone. I can say that I managed to do this to some extent. However, in order to take the project further, I needed to get more help and talk to people more. Of course, talking is not enough. I need to be able to explain my problem and do it in the most efficient way in a short time. People do not wait to listen to my problem. Time is a valuable asset. I should have used it well.5. Don’t trust everyoneWhen working with people, you need to trust them. Everything starts with trust. When we are a team, we need to trust each other and do our job well. I like working with a team. That’s why I trust people. In fact, I start by trusting them. I met with many people in the Podiscover project and got their help, but I trusted them too much. Let’s adjust the distance here. Since the project is still new, I think I should have kept this trust a little less. When I trusted people and handed over the work, I realized that I was moving away from the plan in my head. Actually, the problem here may be that I couldn’t express myself well. I always thought that the other party understood me, and when I didn’t get any questions, I focused on my own work. What I realized here is that if you are at the beginning of the road, you shouldn’t trust too many people. You always have to watch your back and follow your work to the end. There is nothing wrong with that. After all, this is your job and taking ownership is your first duty.6. Quit your full time job and focusLooking back, I didn’t realize that turning a side project into something serious meant I needed to quit my day job. Unlike some people who can balance their regular work with evening and weekend projects—which I truly admire—that’s just not how I operate. I struggled to maintain momentum with both my job and the project. Though I was reluctant to leave my stable position, the daily exhaustion meant Podiscover often took a back seat. Eventually, I had to face the truth: I couldn’t successfully juggle both responsibilities.7. Money is importantMoney is important, even if we sometimes say it isn’t. Every business needs money, though how much depends on your situation. When you start a business, you need money for basics like marketing and ads. In my case, I didn’t have enough savings for these costs. Plus, if I wanted to quit my job to focus on my project, I would have needed money to pay my bills. I only realized how important money was after my project was already running. Here’s what I learned: if you don’t plan for money needs early on, everything ends up costing more later.8. Get out of the houseI work from home and spend most of my time in one room at my desk. Doing both my regular job and personal projects in the same spot became really tiring. Looking back, I should have worked on Podiscover in different places, like cafes or parks. A change of environment would have helped me stay fresh and focused. At first, I thought working at my desk was fine, but doing everything in one place got boring fast. I realized that taking breaks and working from different places is really important for staying productive and creative.9. Believe in what you did, celebrate yourselfWe often forget to celebrate our wins because we’re too busy working or worried about missing out. What we think is a small achievement might actually be a big deal to someone else. That’s why we need to take time to celebrate our successes, even the small ones. We deserve it!During my time working on Podiscover, I did many good things, but I kept pushing myself to do more and more. I never took a moment to step back and say, “Hey, I’m doing a great job!” Instead of being proud of my work, I just kept pushing harder. This made me feel unhappy with my progress. As time went on, I started to lose confidence in my work.Looking back, I realize that if I had taken time to celebrate my achievements and worked at a more reasonable pace, I would have felt much better about the project and believed in it more.10. No one is perfect, let go when the time comesI wanted my project to be perfect, even though I knew that’s impossible. When you’re deeply involved in something, it’s hard to see its flaws. Sometimes you need to step back to see things clearly. I struggled to understand whether my project was successful or not, which made things stressful. The hardest part was deciding when to stop. You often wonder “Is it time to quit?” but there’s no clear answer. The best approach is to watch for warning signs that tell you it’s time to move on. While it’s not easy to let go of something you’ve worked hard on, sometimes it’s necessary. If you hold on too long, things only get harder. Fortunately, I didn’t drag this out too long. Though I could have stopped earlier, I’m glad I recognized when it was time to let go.OutroI learned a lot while working on this project. But just knowing these lessons wasn’t enough - I had to act on them too. My friends actually warned me about some of these things, but when you’re so focused on your work, it’s easy to miss what’s right in front of you. Looking back, I see that while I made mistakes, they were all part of the learning experience. Instead of seeing it as wasted time, I now view it as a valuable journey. The important thing is to keep going forward. This doesn’t mean ignoring our mistakes - it just means we should learn from them and move on without letting them hold us back. Focus on the good parts, learn from the challenges, and keep moving forward.❤️"
  },
  
  {
    "title": "Preventing Race Conditions in Rails: A Practical Guide",
    "url": "/posts/preventing-race-conditions-in-rails-a-practical-guide/",
    "categories": "Development",
    "tags": "ruby on rails",
    "date": "2024-12-12 17:15:00 +0300",
    





    
    "snippet": "Hello 👋A race condition happens when two or more parts of a program try to change the same information at the same time. Think of it like two people trying to edit the same document simultaneously ...",
    "content": "Hello 👋A race condition happens when two or more parts of a program try to change the same information at the same time. Think of it like two people trying to edit the same document simultaneously - it can lead to mistakes and unexpected results. This often happens in programs that run multiple tasks at once, where you can’t predict which task will finish first.Common Scenarios of Race Conditions in Rails1. Updating the Same RecordWhen multiple requests try to update the same database record at the same time, the last operation may overwrite the others without accounting for changes made by other operations.# Two requests fetching and updating the same recorduser = User.find(1)user.balance += 100user.saveIf another process modifies the balance simultaneously, the final value may be incorrect.2. Concurrent Record CreationIf two or more processes attempt to create records with the same unique constraints (e.g., email or username), it might lead to duplication or errors.# Concurrent requests creating users with the same emailUser.create(email: \"test@example.com\")3. Background Jobs and Web RequestsA background job and a web request might access and modify the same resource, causing inconsistencies.How to Prevent Race Conditions in Rails1. Database TransactionsUse ActiveRecord transactions to group related operations into an atomic unit. If any operation in the transaction fails, the entire transaction is rolled back.ActiveRecord::Base.transaction do  user = User.find(1)  user.balance += 100  user.save!end2. Database-Level Locks  Use database locks to ensure only one process modifies a resource at a time.  Optimistic Locking: Rails provides built-in support for optimistic locking using the lock_version column. This approach checks if the record was modified by another process before saving.class User &lt; ApplicationRecord  # Add lock_version column in the tableenduser = User.find(1)user.balance += 100user.save! # Fails if lock_version has changed  Pessimistic Locking: Locks the database row to prevent other processes from modifying it until the lock is released.user = User.lock.find(1)user.balance += 100user.save!3. Uniqueness ConstraintsAdd database-level constraints (e.g., unique indexes) to prevent duplicate records.add_index :users, :email, unique: true4. Retry LogicImplement retries for operations that may fail due to race conditions.begin  user = User.find(1)  user.balance += 100  user.save!rescue ActiveRecord::StaleObjectError  retryend5. Background Job IdempotencyEnsure background jobs are idempotent so that running the job multiple times produces the same result.6. Custom Locking MechanismsUse Redis locks (e.g., with the redlock gem) or similar mechanisms for distributed systems.require 'redlock'redlock = Redlock::Client.new([redis_url])redlock.lock(\"user:#{user_id}:lock\", 2000) do  user = User.find(user_id)  user.balance += 100  user.save!endTools for Detecting Race Conditions  Testing: Write tests that simulate concurrent requests to uncover race conditions.  Concurrency Gems: Use tools like rspec-racecar or parallel_tests for testing concurrency.  Database Logging: Enable detailed database query logs to identify potential race conditions.By understanding the scenarios where race conditions can occur and implementing appropriate safeguards, you can build more robust and reliable Rails applications.❤️"
  },
  
  {
    "title": "Problems with If Clauses",
    "url": "/posts/problems-with-if-clauses/",
    "categories": "Development",
    "tags": "ruby",
    "date": "2024-12-05 16:51:00 +0300",
    





    
    "snippet": "Hello 👋When I started learning Ruby programming, I loved using if statements because they were easy to understand and could be used everywhere. However, as I built bigger projects, I noticed a prob...",
    "content": "Hello 👋When I started learning Ruby programming, I loved using if statements because they were easy to understand and could be used everywhere. However, as I built bigger projects, I noticed a problem: my code became messy and hard to understand. I had too many nested if statements, and my logic was scattered all over the place.I learned an important lesson: writing good if statements isn’t just about getting the code to work. It’s about writing code that other people (and future me) can easily read and update. I found better ways to organize my code by using techniques like guard clauses and breaking big problems into smaller pieces. Sometimes, I even redesigned my code using object-oriented programming principles.These improvements helped me write cleaner, better-organized code. Looking back, learning to write better if statements has been one of the most valuable skills I’ve gained as a Ruby programmer.Problems with Overusing if Clauses:1. Complexity:  Nested if statements create hard-to-read, hard-to-maintain code.  Each new if statement creates another decision branch, making code more complex.2. Duplication:  The same conditions often appear in multiple places, creating unnecessary redundancy.3. Single Responsibility Principle Violation:  Embedding business logic in conditionals often mixes different responsibilities.4. Testing Challenges:  Code with many branches requires extensive testing to cover all scenarios.def process_order(order)  if order.status == \"pending\"    if order.total &gt; 100      puts \"Large order pending!\"    else      puts \"Regular order pending.\"    end  elsif order.status == \"completed\"    if order.shipped      puts \"Order already shipped.\"    else      puts \"Completed but not shipped yet.\"    end  else    puts \"Unknown status.\"  endendThis code is hard to follow, with nested if clauses and repeated logic.Best Practices to Handle if Clauses:1. Use Guard Clauses:Eliminate unnecessary nesting by returning early.def process_order(order)  return puts \"Unknown status.\" unless %w[pending completed].include?(order.status)  if order.status == \"pending\"    puts order.total &gt; 100 ? \"Large order pending!\" : \"Regular order pending.\"  elsif order.status == \"completed\"    puts order.shipped ? \"Order already shipped.\" : \"Completed but not shipped yet.\"  endend2. Extract Logic into Methods:Break down the logic into smaller, focused methods.def process_order(order)  case order.status  when \"pending\"    handle_pending_order(order)  when \"completed\"    handle_completed_order(order)  else    puts \"Unknown status.\"  endenddef handle_pending_order(order)  puts order.total &gt; 100 ? \"Large order pending!\" : \"Regular order pending.\"enddef handle_completed_order(order)  puts order.shipped ? \"Order already shipped.\" : \"Completed but not shipped yet.\"end3. Use a Hash for Conditional Mapping:Replace if or case logic with a hash for simple lookups.STATUS_MESSAGES = {  \"pending_large\" =&gt; \"Large order pending!\",  \"pending_regular\" =&gt; \"Regular order pending.\",  \"completed_shipped\" =&gt; \"Order already shipped.\",  \"completed_not_shipped\" =&gt; \"Completed but not shipped yet.\"}.freezedef process_order(order)  key = build_status_key(order)  puts STATUS_MESSAGES[key] || \"Unknown status.\"enddef build_status_key(order)  case order.status  when \"pending\"    order.total &gt; 100 ? \"pending_large\" : \"pending_regular\"  when \"completed\"    order.shipped ? \"completed_shipped\" : \"completed_not_shipped\"  endend4.Use Polymorphism:Replace conditionals with object-oriented design when logic varies by type.class Order  def process    raise NotImplementedError  endendclass PendingOrder &lt; Order  def initialize(total)    @total = total  end  def process    puts @total &gt; 100 ? \"Large order pending!\" : \"Regular order pending.\"  endendclass CompletedOrder &lt; Order  def initialize(shipped)    @shipped = shipped  end  def process    puts @shipped ? \"Order already shipped.\" : \"Completed but not shipped yet.\"  endend# Example Usageorder = PendingOrder.new(150)order.process # =&gt; \"Large order pending!\"Conclusion:While if clauses are essential in programming, their overuse can make code difficult to maintain. Here’s how to write better code:  Implement guard clauses to keep logic simple and clear  Break down complex logic into smaller methods and leverage data structures like hashes  Apply object-oriented patterns such as polymorphism when handling complex conditional branchesBy following these practices, you’ll create Ruby code that’s both cleaner and easier to maintain. 😊❤️"
  },
  
  {
    "title": "Accessing Values in a Hash with dig in Ruby: Differences and Alternatives",
    "url": "/posts/accessing-values-in-a-hash-with-dig-in-ruby-differences-and-alternatives/",
    "categories": "Development",
    "tags": "ruby",
    "date": "2024-11-29 16:36:00 +0300",
    





    
    "snippet": "Hello 👋Ruby provides multiple ways to access Hash values. The dig method offers a safe approach for retrieving values from nested Hash or Array structures. Let’s explore how dig works, along with i...",
    "content": "Hello 👋Ruby provides multiple ways to access Hash values. The dig method offers a safe approach for retrieving values from nested Hash or Array structures. Let’s explore how dig works, along with its alternatives and key differences:Using digThe dig method lets you traverse nested structures by specifying a path of keys. Rather than raising an error when a key doesn’t exist, it simply returns nil.hash = { user: { profile: { name: \"Ender\", age: 38 } } }# Accessing the 'name' valuehash.dig(:user, :profile, :name) # =&gt; \"Ender\"# Invalid pathhash.dig(:user, :address, :city) # =&gt; nilBenefits:  Safe: Avoids errors by returning nil if any key is missing.  Readable: Makes code cleaner when working with complex structures.AlternativesChaining KeysWhile you can chain keys directly to access a value, this approach is risky—it will raise a NoMethodError if any intermediate key is nil.hash = { user: { profile: { name: \"Ender\", age: 38 } } }# Accessing the 'name' valuehash[:user][:profile][:name] # =&gt; \"Ender\"# Invalid pathhash[:user][:address][:city] # =&gt; Error: undefined method `[]' for nil:NilClassDifference:  Unlike dig, chaining keys can result in errors if the path is invalid.Using Safe Navigation Operator (&amp;.)The safe navigation operator (&amp;.), introduced in Ruby 2.3, lets you chain method calls safely by returning nil when encountering a nil value instead of raising an error.hash = { user: { profile: { name: \"Ender\", age: 38 } } }# Accessing the 'name' valuehash[:user]&amp;.dig(:profile, :name) # =&gt; \"Ender\"# Invalid pathhash[:user]&amp;.dig(:address, :city) # =&gt; nilDifference:  A more modern approach that can be combined with dig for added flexibility.Using fetchThe fetch method retrieves a value for a given key and raises an error if the key doesn’t exist. You can handle missing keys by providing either a default value or a block.hash = { user: { profile: { name: \"Ender\", age: 38 } } }# Accessing the 'name' valuehash[:user][:profile].fetch(:name, \"Default Name\") # =&gt; \"Ender\"# Missing key with default valuehash[:user][:profile].fetch(:address, \"Unknown\") # =&gt; \"Unknown\"Difference:  fetch can provide a default value for missing keys, but it must be called at each level of a nested structure.Deep Search with each_with_objectTo search for a key nested deep within a structure, you can use specialized methods like each_with_object.hash = { user: { profile: { name: \"Ender\", age: 38 } } }def deep_search(hash, key)  hash.each_with_object(nil) do |(k, v), result|    if k == key      return v    elsif v.is_a?(Hash)      result = deep_search(v, key)      return result if result    end  endenddeep_search(hash, :name) # =&gt; \"Ender\"deep_search(hash, :age) # =&gt; 38Difference:  Useful for deep searches but more complex and computationally expensive.Conclusion: Which Method to Use?  If safety and readability are your primary concerns when working with nested data structures, consider using the built-in dig method, which gracefully handles nil values and provides a clear, chainable syntax.  When dealing with flat Hash structures that have a simple, single-level organization, direct key chaining using square bracket notation or dot syntax proves to be the most straightforward and effective approach for accessing values.  In scenarios where you need to handle default values or implement robust error handling mechanisms, the fetch method offers comprehensive options for specifying fallback values and custom error messages when keys are not found.  For situations involving complex searches through deeply nested data structures with multiple levels, leverage powerful enumerable methods like each_with_object to efficiently traverse and transform the data while maintaining clean, maintainable code.❤️Note: I got help by AI for improving English of that post and examples."
  },
  
  {
    "title": "Another World is Also Possible.",
    "url": "/posts/another-world-is-also-possible/",
    "categories": "Personal",
    "tags": "experience",
    "date": "2024-11-26 15:11:00 +0300",
    





    
    "snippet": "Hello 👋When I started my career, I was full of energy and saw endless possibilities ahead. But after 13 years in the same profession, something changed. Now I often wonder: Am I running out of chal...",
    "content": "Hello 👋When I started my career, I was full of energy and saw endless possibilities ahead. But after 13 years in the same profession, something changed. Now I often wonder: Am I running out of challenges? Has my passion faded? Should I try something completely new? What’s holding me back from growing? Why do I lie awake at night? Am I focusing on the right things? If these questions sound familiar to you, keep reading.I want to share my personal journey with you. While my experience might be different from yours, I believe you’ll find something valuable in this story I won’t give you a list of rules to follow or tell you when to wake up or exercise. Instead, I’ll simply share how I changed and what I learned along the way.  If I hadn’t gone to university, I wouldn’t have become a self-taught programmer. I know this because I know myself.Let me explain how I got into this field. Growing up, I wasn’t particularly interested in computers, but I knew I wanted a career involving them. Although I didn’t score well on the university entrance exam (ÖSS), my family supported me in getting into my chosen school. During my studies, I discovered my true passion and learned to set goals and make plans to achieve them.  Developing software is nice, but another world is also possible.I’m naturally outgoing and enjoy connecting with people. Spending time together and sharing experiences brings me joy. I’m honest about who I am - I enjoy recognition for my work. What makes me truly happy is public speaking, organizing groups, taking the lead, and achieving goals with others. I discovered these things about myself during my university years.This self-discovery in college proved valuable for my career. School played a crucial role in my life, particularly in learning English. Though I sometimes questioned why I needed these skills, they’ve become incredibly useful. Today, I can talk to people around the world. I have friends across the globe for two main reasons: my career in technology and my ability to speak English.After five years of university, I graduated with a diploma but felt uncertain about my future. What I knew for sure was that I wanted to enjoy my work. I’m the kind of person who prefers to avoid unnecessary stress and complications. I believe in working in a way that feels natural, not like a programmed robot - even though that’s not always appreciated in today’s business world. While I believe in working hard and achieving goals, I’ve learned that I need to stay true to who I am. This approach might not make me the most successful person in my field, but it lets me live honestly. Yes, being myself has sometimes caused problems in both my career and personal life, but I’m okay with that. Through my mistakes, I’ve learned valuable lessons.  I wanted to show people what I had done and receive their praise.Near the end of my university years, I found a programming tool called Ruby on Rails. While I had learned other programming languages like C and Java in school, Ruby on Rails was different. It let me create things quickly and easily share them with others. This was perfect for me because I loved showing my work to people and getting positive feedback.Through Ruby on Rails, I discovered the Ruby programming language and connected with people from all over the world online. Even before graduating, I was working on exciting projects and getting help from a wonderful community of developers. They taught me new things and made programming fun again. The best part was working together with others.Back in the 2010s, using Ruby on Rails on Windows computers was very challenging. To solve this problem, I started using UNIX-based systems - first Linux, then Mac OSX. This led me to spend more time at my school’s computer club.The computer club turned out to be a great opportunity. I got to lead projects, work with others, and be part of a community. That’s when I realized something important: I could combine my love for technology with my passion for bringing people together. I hadn’t known this was possible before, but once I discovered it, I found it incredibly rewarding.  I will be a man who deals with Ruby in Turkey and my name and Ruby will somehow be side by side.As I was about to graduate, I needed to find a job. My family wanted to help and suggested various corporate positions, but I had different plans. The big corporate world seemed too rigid and boring to me. Instead, I wanted to work at a startup where I could use Ruby on Rails and be part of a more dynamic environment. I also had a bigger dream: I wanted to become known as a Ruby expert in Turkey and make a name for myself in this field. This became my personal promise.Looking back, I realize I haven’t shared many technical details yet. But that’s because I understood something important: to succeed in this field, I needed to prove myself technically first. I knew I had to work hard and show my skills before anything else. This approach helped me in every job I had - I would first demonstrate my technical abilities, and then I could also showcase my other talents.I’m outgoing and direct. When I want something, I simply ask for it. This approach has worked well for me, especially in startups. I take charge of projects, follow through, and create results. I loved working with Ruby programming, and I just needed to prove myself. I’ve been lucky to work with kind and supportive people who value hard work. By staying true to myself, I’ve achieved my goals.While I enjoy technical work, I’m not just a technical person. Working with people energizes me. I need human interaction and leadership opportunities - I can’t thrive working alone in isolation.To help grow Ruby programming in Turkey, I helped build a community. We’ve accomplished a lot together, and we’re still going strong. This community work complements my regular job perfectly. My people skills help me connect with others in the community, where I meet people from many different backgrounds. I don’t believe in isolating myself - it wouldn’t make me happy. I love being part of this community and helping others learn programming. I get positive feedback regularly and feel confident about my path.I mentioned that I love public speaking, and there are many chances to do this in tech. When I first started presenting, I was worried about what people would think. But instead of criticism, I found opportunities. Speaking led me to meet new people and opened many doors. Now I share knowledge in different ways - through talks, podcasts, videos, and blog posts. While this isn’t part of my official job description, I believe in creating new possibilities.Beyond my main job, I’ve found joy in other activities like mentoring, teaching coding bootcamps, and working on open source projects. Yes, my job is to write good, reliable software - and I do that well. But why stop there? I’ve found ways to add more meaning to my work while staying true to who I am.If you’ve read this far, think about what makes you happy. Maybe you love coding, and that’s great! But consider exploring other options too. Sometimes we get stuck in our routines and miss opportunities around us. Take time to pause and listen to your inner voice. Keep trying new things and learning. There’s always more to discover.❤️"
  },
  
  {
    "title": "Euruko 2024 and My Feelings",
    "url": "/posts/euruko-2024-and-my-feelings/",
    "categories": "Personal",
    "tags": "conference",
    "date": "2024-09-17 22:11:00 +0300",
    





    
    "snippet": "Hello! I am still working professionally with the Ruby programming language, which I first started in 2011. I love the community as much as the language itself, and I am always proud to be a part o...",
    "content": "Hello! I am still working professionally with the Ruby programming language, which I first started in 2011. I love the community as much as the language itself, and I am always proud to be a part of this community. I also try to organize people and do things on my own. Additionally, I enjoy getting together with other people who are devoted to the Ruby programming language, spending time with them, and sharing information. I had the opportunity to attend Euruko, the oldest and longest-running conference series for the Ruby programming language in Europe, for the first time this year. Perhaps the time had finally come.I was very excited when Euruko was first announced because it was clear that it would be in Tuzla, Bosnia and Herzegovina. I would like to make a note here: The location of Euruko for the next year is determined by voting on the cities nominated by participants in the year it is held. Tuzla was chosen for 2024, and we, especially me, were excited. The fact that Bosnia is close and does not require a visa from Turkey was a big plus. So, I started preparations immediately.As the founder and manager of the Ruby community in Turkey, I thought we should also have a share in this event. I contacted Muhammed from the team organizing Euruko and told him that we could support him as a community. Thus, Ruby Turkey officially became one of the Community Partners of Euruko 2024. This initiative made both the community and me proud.As a community, we started to support Euruko by advertising on social media and at the events we organized, and by explaining the latest developments. We knew that we would be in Bosnia and Herzegovina with a significant number of participants from Turkey.While all this was happening, the city where the conference would be held was changed from Tuzla to Sarajevo. This did not matter to us, but when we look at it in general, we can say that it was better.I have not given a speech in English at an international conference in my career yet. I wanted Euruko to be the first and sent a speech proposal, but it was not accepted. I haven’t given a speech in international yet. I may have by the time you read this article, I don’t know. It’s not a big deal if the speech is not accepted. There are many conferences and my enthusiasm is high. The important thing here is to try—to have this idea, to continue to improve myself, and to look for new places to give speeches. I think that being shy and holding back doesn’t work very well. After all, no one says, “Come and give a speech at our conference.”While making plans for the event, my current wife (who was my fiancée at the time) said, “Let’s go to Sarajevo together. I will attend the conference and you can travel. Then when we find time, we can travel together.” Thankfully, she accepted. The Bosnia-Herzegovina trip and Euruko were like a second honeymoon for us. That’s why it had such an important meaning for me and my wife.After the speakers were announced, we were very happy to see Matz among them. He is already our hero for creating a programming language like Ruby, continuing to develop it, and establishing such a community. It was great to meet him, chat with him a little, and take photos. It was wonderful to have these opportunities.Along with Matz, there were many other valuable speakers. The fact that there was a speaker I wanted to listen to and meet also increased my excitement for Euruko. My conference ticket was ready. The hotel and flights were also arranged. We were going as a large team from different cities in Turkey.Day 1I came to Sarajevo with my wife the day before the conference. I wanted to spend some time with her and go to the conference in a relaxed manner.I was excited on the morning of the conference. I knew it would be crowded, and I anticipated who I would see, what kind of speeches would be given, and most importantly, what kind of fun awaited me for three days.I would like to share a note here. Conferences are not like a university environment where you simply go and attend presentations. You have the opportunity to meet many people professionally. You see your old friends again. You get a lot of swag like stickers and t-shirts. You meet new companies. You can eat nice food and see different countries and cities.With all these expectations, I officially started the adventure of Euruko.Since I was staying at the hotel where the conference would be held, I did not have to worry about transportation. Right after breakfast, I went to the relevant place for registration, and I’m glad I did because there was an incredible line afterwards. However, the line moved quickly and soon dissipated. They probably managed it efficiently to ensure everyone made it to the opening speech. After getting my Euruko conference bag and t-shirts prepared for us, I was ready for the conference.The conference was held in three separate halls, which sometimes meant three talks at the same time. So I had already determined which talks I would attend. Of course, there were changes afterwards. Xavier Noria opened the session, and we officially started with a nice talk. I had also heard him at Balkan Ruby in April. I think he is a good narrator. I continued with Jean Boussier’s talk. By the way, since the breaks were very short, I had to leave the talks a little early. There was not much time to grab coffee and go to the bathroom. The content of Jean’s talk was good. Since the subject was interesting to me and he was someone I had heard of, his talk was also enjoyable. Since the presentation titled “Ruby off Rails” caught my attention and I didn’t know the speaker, I decided to take a look. Erica Weistrand told us how they don’t use Rails in their company. It was an interesting talk. I didn’t attend the last talk in order to have lunch and socialize with Turkish developers. We increased our socializing a bit more in the afternoon, and I can say that we didn’t attend some of the speeches. After Dmitry Pogrebnoy’s presentation titled “Demystifying Debugger,” I did some networking and chatted with the developer until the closing speech. I closed the day after Irina Nazarova’s AnyCable speech and the closing session, namely Bartosz Blimke, Adrian Marin &amp; José Valim’s chat.I guess I was a little tired. Since my conference muscles were not strong, listening to presentations, socializing, and talking tired me and made me hungry. We got together with some Turkish developer friends—not all of them—and went out. We had dinner, then had a drink and chatted. Since we don’t get together much as the Ruby Turkey community, this meeting was good for us. By the way, since the weather was very cold that day, I think I caught a cold, and it passed with a runny nose and sneezing in the following days. I think I caught a cold. 😊Day 2I started the day with the tiredness of the first day but the curiosity of the second day. After a nice breakfast, I took my place in the main hall for Koichi Sasada’s opening speech of the second day. He talked about YARV’s 20 years, but I can say that I was a little tired during this presentation. Although it was only the first presentation, I think the tiredness of the previous day was still there. Afterwards, I can say that I came to my senses with Marco Roth’s beautiful Hotwire presentation. I don’t use Hotwire, but the presentation excited and enthused me. Afterwards, I listened to Yaroslav Shmarov’s presentation titled “Rails 8 Frontend: 10 commandments and 7 deadly sins in 2025.” He gave good advice for the future. I hope I remember :) Today, I wanted to leave early for lunch and socialize a little.In my opinion, the Maple Ong presentation in the afternoon was lackluster compared to his previous presentations. I had listened to him at Euruko during the pandemic and liked him very much. I can’t say I liked him very much this time. I couldn’t attend the next speeches. Since I didn’t know Prakriti Matet and the title of his speech “One does not simply… rebuild a product” caught my attention, I attended this speech. It was going well at first, but I guess I couldn’t finish it because of the tiredness of the day.José Valim gave the closing speech, and I think it was the best speech of the conference. I really liked it. Maybe he talked about his own product, but it was an enjoyable speech with his narrative style and footnotes. I ran into him in the elevator on the way to our rooms afterwards and had the chance to chat a bit.The evening was spent with a DJ party and socializing. These types of events at conferences are great. There was also a karaoke party, but I didn’t want to sing much because I didn’t trust my voice, my nose was running, and my throat was a little sore.The other conferences I mentioned above are not places where you can just listen to presentations. On the contrary, they are places where you can socialize and expand your network. I think you should evaluate these and attend as much as possible.Day 3As with every good thing, the conference had come to an end on its last day. The weather had started to get colder, and I could say that there was a feeling of sadness all around. Dave Thomas gave the opening speech today. He was someone I wanted to listen to, and I am so happy that I experienced this. I was going to bring his book “The Pragmatic Programmer” and have it signed, but I forgot to bring the book with me. I liked his speech. He talked about the programming languages he had learned so far and the effects they had on him. Of course, the part where he talked about Ruby was the best.Then I attended the speech of Obie Fernandez, who was also a DJ the night before. It wouldn’t be right if AI wasn’t at a conference :) My expectations from this speech were a little different, but I can still say it was fun. I attended the speech where Cristian Planas &amp; Anatoly Mikhaylov talked about how they upgraded their projects together. I don’t really like speeches by two people. It seems to have a slow rhythm. I followed the explanations because the subject interested me, but I can’t say it was very enjoyable for me.After the speeches were over, before lunch, it was time to announce the candidate cities for Euruko 2025. For some reason this year, only Barcelona was officially a candidate and prepared a presentation. However, at the last minute, Viana do Castelo from Portugal took the stage as a candidate. To be honest, I had never heard of this city before. The presentation of the city was made by showing a few places from Google. Sarajevo was also a candidate. I was thinking about it, but of course there was no chance of being selected. In fact, it turned out well. If Barcelona had been the sole candidate, there would have been no competition. The cities made their presentations and the vote was held. My vote went to Barcelona, but the winner was Viana do Castelo. It has now been officially determined that Euruko 2025 will be held in this city. I have a feeling that what happened to Tuzla will also happen to Viana do Castelo. In other words, the conference location may change since it is 70 km away from Porto. We will wait and see.After lunch, I could only listen to Kasper Timm Hansen’s “How to Break into Reading Open Source” talk. This talk was a bit similar to the talk he gave at Ruby Turkey, but it seemed a bit lighter to me than the one he gave there. In terms of content, the talk he gave in the community was more intense and a bit more advanced.Now Matz was on the stage to give the talk. It was enjoyable to watch him live. Especially the introductory part of the talk was very nice. He talked a bit about the kindness of the Ruby community and the reason for this. In fact, you can understand this when you are in the community a little. I feel this almost every day. After talking about Ruby’s current situation and future, Matz’s speech ended. The hall was almost full, which was to be expected. For me, Euruko ended with this speech. Before leaving the conference, I found the people I knew, said goodbye, and wished each other to see each other again somewhere.FinalI can’t make a comparison because I haven’t been able to attend a Euruko before. I can only imagine how difficult and troublesome it is to organize such an event. That’s why I would like to thank the people who organized it again. Every conference may have shortcomings; this is normal. What is important is to correct and improve them in the coming years. I don’t know if I will be at Euruko 2025. Maybe those who went can compare it with 2024. I can say that I learned a lot from this event both personally and as Ruby Turkey. First of all, I think that being a strong community is important in organizing such events. We also had the opportunity to talk among ourselves about what we can do on behalf of the community. We took a few steps that could be taken and started to take action. We will have announcements in the coming days. Personally, I want to be at more conferences. Even if they’re not international, I want to be able to attend these in Turkey. Not just Ruby, maybe other languages, maybe more general software conferences. This way, I want to meet more people and experience more different things. Let’s see what the future brings.❤️"
  },
  
  {
    "title": "The First International Conference Experience",
    "url": "/posts/the-first-international-conference-experience/",
    "categories": "Personal",
    "tags": "conference",
    "date": "2024-04-30 17:11:00 +0300",
    





    
    "snippet": "Hello! I attended Balkan Ruby 2024. I had never attended any conferences abroad. This was my first abroad conference, and I was very excited. I chose to attend Balkan Ruby as it was held in Sofia, ...",
    "content": "Hello! I attended Balkan Ruby 2024. I had never attended any conferences abroad. This was my first abroad conference, and I was very excited. I chose to attend Balkan Ruby as it was held in Sofia, and Bulgaria is very close to Turkey - just an hour’s flight away. I also appreciate their culture as it closely resembles ours in terms of history. Additionally, I had never been to Sofia before.I purchased my conference ticket even though the speakers hadn’t been announced yet. The speakers was’t my main concern; I was more interested in the experience. Generally, traveling isn’t my favorite activity, but as a remote worker, I aim to meet up with my colleagues at least 2-3 times a year. After getting my conference ticket, I encouraged others to join the conference in Turkey. I hoped to travel with 5-6 friends or at least meet them at the conference. I thought it would be a great opportunity to learn new things, meet new Ruby enthusiasts, and explore the city. As a Turkish citizen, I would normally need a Bulgarian or Schengen visa to enter Bulgaria, but luckily, I already had a one-year Schengen Visa. My colleagues and I met in Sofia, where we worked together during the week and attended the Balkan Ruby conference together. We had a group of 10 people from Turkey who attended the Balkan Ruby.It was excited for the first day as a local community leader in Turkey, given the chance to observe an international conference. Who knows, maybe in the future, we could organize one. The conference location changed twice, although I’m not sure why. It wasn’t a big issue, as Sofia isn’t a large city and it has a good metro public transportation system. My friend and I could easily reach the conference venue from our home.Finding the conference venue was straightforward because the organizers made a video guiding us there. Additionally, in the large building, there were many signs directing us to the conference rooms. The registration process was smooth, which I hadn’t anticipated. We received our Ruby Balkan t-shirts, which were simple yet high-quality.Coffee is crucial to us. It’s our fuel. While coffee may not always be fantastic, at least it’s free. We also have the option to drink fruit tea, black tea, and water. The food is good and tasty as well. One of the highlights is the opportunity to taste a fresh local pastry called Banitsa. As a Turk, it reminded me of our own pastry (börek), but I must say, the Banitsa was quite good.Day 1It was Friday and I had to work. I had wanted to join the conference and I worked while conference. I couldn’t be focus as I expected. I had to join a meeting as-well, so I missed some talks. It is not problem. All talks will be uploaded, and I can watch them online.The first talk was engaging, given by Irina Nazarova, the CEO of Evil Martians. This company has long been making valuable contributions to the community. In her talk, Irina provided some insights into how Evil Martians operates its consultancy.The second talk I attended was by Adrian Marin, who has been building Avo. He discussed how he transformed an open-source project into a business. I found this very interesting and even had a conversation with Adrian about it afterwards. Nearly a year ago, I closed my open-source side project, Podiscover, after two years of work. I learned a lot from this experience and shared my knowledge with Adrian. During our conversation, I suggested that I might invite him to the Uretim Bandi:Teknik podcast one day.“Sustainable OSS Development” by Bozhidar Batsov was the third talk I attended. Batsov contributes to Rubocop, the most well-known Ruby gem for the Ruby style guide. The talk focused on the main challenges of developing and maintaining an OSS project. As I’m curious about long-term open source project management, I appreciated gaining insights from Batsov’s experiences and ideas.We went to a nearby place for lunch. It was a good restaurant, very popular in Sofia. The menu was extensive, covering almost all global cuisine. I don’t remember what I ate, but it was good 🙂In the afternoon, I was able to attend only one talk, presented by Aitor Garcia Rey about their fintech tool developed in Ruby. Unfortunately, I was distracted by an issue that I had to address at the same time, so I wasn’t able to fully concentrate on the talk. However, from what I could gather, it was an engaging presentation. I plan to revisit this talk once it’s uploaded. Observing the use of Ruby in real-world fintech cases is genuinely exciting.The final topic I want to tell is the after-party. Conference attendees, identifiable by a red bracelet, had access to free beer. The party was hosted in a cozy place, under favorable weather conditions—unlike Turkey, it wasn’t cold. We enjoyed our beers and mingled with new people.Day 2After a good night’s sleep, I was prepared for the second day of Balkan Ruby. Since it was Saturday and I didn’t have to work, I expected to focus more on the conference than I did the first day. However, that didn’t happen. For some reason, I couldn’t join the afternoon talks. Instead, I preferred to engage in discussions on various topics with new friends and explore Sofia in the daylight, as it was my last day in the city.The first talk of the day was given by Xavier Noria, the author of Zeitwerk. I was thrilled to hear about his 14 years of freelancing experiences. The title of his talk was intriguing, and his speech was equally engaging. I’m typically not one to focus heavily on deadlines, and I generally avoid giving exact completion dates for the projects I work on. From what I understood, this approach isn’t necessarily negative. At least, it works for me.Thoughtbot is a company that significantly contributes to the Ruby ecosystem. I’ve followed them for many years and appreciate their valuable Ruby gems, blog posts, podcasts, and more. Dimiter Petron detailed their processes and motivations in his talk. I greatly admire their efforts.The final presentation I attended at Balkan Ruby 2024 was “One Engineer Company with Ruby on Rails” by Radoslav Stankov. I admire Ruby on Rails and believe it empowers individuals to develop anything they desire. It’s a perfect framework for a solo developer. As indicated by the title, Radoslav shared his experiences using it. I found the talk enlightening as I advocate for the solo developer framework in product development.FinalIn short, it was a good conference. While there’s always room for improvement, I enjoyed my time there and gained some personal insights that I’ll keep in mind for future events. I understand that organizing such events can be challenging, so I’m truly grateful to the Balkan Ruby team for making it happen. I’m looking forward to an equally amazing experience next time.❤️"
  },
  
  {
    "title": "New Theme",
    "url": "/posts/new-theme/",
    "categories": "Personal",
    "tags": "general",
    "date": "2024-03-14 21:35:00 +0300",
    





    
    "snippet": "I’ve embraced the journey of exploring countless blog themes, and I’m far from done. This theme is the current chapter in an ongoing story of growth and transformation. Rest assured, this blog will...",
    "content": "I’ve embraced the journey of exploring countless blog themes, and I’m far from done. This theme is the current chapter in an ongoing story of growth and transformation. Rest assured, this blog will continue to evolve and flourish with time.Transferring old blog posts? Not a chance. I choose the invigorating freshness of a new beginning. Onwards and upwards! 🙌"
  }
  
]

